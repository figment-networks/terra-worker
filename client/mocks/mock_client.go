// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/terra-worker/client (interfaces: GRPC)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	structs "github.com/figment-networks/indexing-engine/structs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGRPC is a mock of GRPC interface
type MockGRPC struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCMockRecorder
}

// MockGRPCMockRecorder is the mock recorder for MockGRPC
type MockGRPCMockRecorder struct {
	mock *MockGRPC
}

// NewMockGRPC creates a new mock instance
func NewMockGRPC(ctrl *gomock.Controller) *MockGRPC {
	mock := &MockGRPC{ctrl: ctrl}
	mock.recorder = &MockGRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGRPC) EXPECT() *MockGRPCMockRecorder {
	return m.recorder
}

// GetBlock mocks base method
func (m *MockGRPC) GetBlock(arg0 context.Context, arg1 structs.HeightHash) (structs.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0, arg1)
	ret0, _ := ret[0].(structs.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockGRPCMockRecorder) GetBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockGRPC)(nil).GetBlock), arg0, arg1)
}

// SearchTx mocks base method
func (m *MockGRPC) SearchTx(arg0 context.Context, arg1 structs.HeightHash, arg2 structs.Block, arg3 uint64) ([]structs.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]structs.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTx indicates an expected call of SearchTx
func (mr *MockGRPCMockRecorder) SearchTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTx", reflect.TypeOf((*MockGRPC)(nil).SearchTx), arg0, arg1, arg2, arg3)
}
